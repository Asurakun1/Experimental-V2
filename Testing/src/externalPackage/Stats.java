package externalPackage;

import java.text.DecimalFormat;
import java.util.Random;
import java.util.Scanner;

/*
 * Level up Stat database current form is based off of RnG(Praise thee lord RnG jesus!). 
 * 
 * user based addition upon stat distribution implemented!
 * 
 * version 0.1.9
 * 
 * @Author Asurakun1
 */

public class Stats {
	
	
	//Dear god my long list of variables
	private DecimalFormat format = new DecimalFormat("#,###");
	private int Str;
	private int Int;
	private int Dex;
	private int Will;
	private int Luck;
	private int[] lvl = new int[52];
	private int temp1, temp2, temp3, temp4, temp5;
	private int currentLevel, levelCounter = 1;
	private int statpts, levelLooper;
	private boolean leveled;
	private Scanner input = new Scanner(System.in);
	
	private int Exp = 0, reachExp = 1000;
	
	//RNG object. Praise thee RnG Jesus!
	Random rand = new Random();
	
	public int setPts(int numberOfPoints) {
		statpts = statpts + numberOfPoints;
		return statpts;
	}
	
	public int getPts() {
		return statpts;
	}
	
	
	/*
	 * This is the stat distribution system.
	 * Goal is to have user defined stats instead of presets generated by RnG(Praise thee lord Rng Jesus!)
	 * Method to run for as long as many levels until level cap.
	 * Reaching level cap will have about 1-3 extra points. 
	 * REMEMBER this is just an experiment not a complete project.
	 */
	public void addPtsToStat() {
		
		/*
		 * God damn AP system taking up most of my code.
		 */
		boolean run = true;
		String input = new String();
		Integer inputV = new Integer(0);
		System.out.println("Now testing the system. if posts then does as expected.");
		
		while(run) {
			System.out.println("Character Stats: \n");
			getStats();
			
			
			/*
			 * Modifable stats:
			 * Strength
			 * Intelligence
			 * Dexterity
			 * Will
			 * Luck
			 */
			
			while(statpts > 0) {
				System.out.println("You have a total of " + statpts + " ability points available for stat distributition.");
				System.out.println("Select the stat and the amount you would like to distribute to. Type 'exit' to return back");
				
				input = this.input.next();

				if(input.toLowerCase().equals("exit")) {
					break;
				}
				
				switch(input.toLowerCase()) {
				
					//Strength Allocator
					case "str":
						while(true) {
							System.out.println("Strength has been selected. How many points would you like to distribute?");
							
							input = this.input.next();
							
							//Conversion of a String to an Integer
							if(input.toLowerCase().equals("exit")) {
								break;
							}else {
							
								try {
								
									inputV = Integer.parseInt(input);
								
								} catch (NumberFormatException e) {
									System.out.println("That is not a number.");
								}
							
							}
							
							if(inputV > statpts) {
								System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
							}else if(inputV < 0) {
								System.out.println("Invalid amount. Type cannot be a negative value.\n");
							}else if(inputV.intValue() == 0){
								System.out.println("Invalid amount. Entering 0 or another type is not allowed.\n" );
							}else {
								this.Str = this.Str + inputV;
								statpts = statpts - inputV;		
								System.out.println("Your strength has increased by " + inputV + ".\n");
								getStats();
								inputV = 0;
								break;
							}
							
						}
						break;
						
						
					//Intelligence Allocator
					case "int":
						while(true) {
							System.out.println("Intelligence has been selected. How many points would you like to distribute?");
							
							input = this.input.next();
							
							//Conversion of a String to an Integer
							if(input.toLowerCase().equals("exit")) {
								break;
							}else {
							
								try {
								
									inputV = Integer.parseInt(input);
								
								} catch (NumberFormatException e) {
									System.out.println("That is not a number.");
								}
							
							}
							
							if(inputV > statpts) {
								System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
							}else if(inputV < 0) {
								System.out.println("Invalid amount. Type cannot be a negative value.\n");
							}else if(inputV == 0){
								System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
							}else{
								this.Int = this.Int + inputV;
								statpts = statpts - inputV;
								System.out.println("Your Intelligence has increased by " + inputV + ".\n");
								getStats();
								inputV = 0;
								break;
							}
							
						}
						break;
						
						
					//Dex Allocator
					case"dex":
						while(true) {
							System.out.println("Dexterity has been selected. How many points would you like to distribute?");
							
							input = this.input.next();
							
							//Conversion of a String to an Integer
							if(input.toLowerCase().equals("exit")) {
								break;
							}else {
							
								try {
								
									inputV = Integer.parseInt(input);
								
								} catch (NumberFormatException e) {
									System.out.println("That is not a number.");
								}
							
							}
							
							if(inputV > statpts) {
								System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
							}else if(inputV < 0) {
								System.out.println("Invalid amount. Type cannot be a negative value.\n");
							}else if(inputV == 0){
								System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
							}else{
								this.Dex = this.Dex + inputV;
								statpts = statpts - inputV;
								System.out.println("Your Dexterity has increased by " + inputV + ".\n");
								getStats();
								inputV = 0;
								break;
							}	
						}
						break;
						
						
					//Will Allocator
					case "wll":
					case "will":
						while(true) {
							System.out.println("Will has been selected. How many points would you like to distribute?");
							
							input = this.input.next();
							
							//Conversion of a String to an Integer
							if(input.toLowerCase().equals("exit")) {
								break;
							}else {
							
								try {
								
									inputV = Integer.parseInt(input);
								
								} catch (NumberFormatException e) {
									System.out.println("That is not a number.");
								}
							}
							
							if(inputV > statpts) {
								System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
							}else if(inputV < 0) {
								System.out.println("Invalid amount. Type cannot be a negative value.\n");
							}else if(inputV == 0){
								System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
							}else{
								this.Will = this.Will + inputV;
								statpts = statpts - inputV;
								System.out.println("Your Will has increased by " + inputV + ".\n");
								getStats();
								inputV = 0;
								break;
							}	
						}
						break;
						
						
					//Luck Allocator
					case "lck":
					case "luck":
						while(true) {
							System.out.println("Luck has been selected. How many points would you like to distribute?");
							
							input = this.input.next();
							
							//Conversion of a String to an Integer
							if(input.toLowerCase().equals("exit")) {
								break;
							}else {
							
								try {
								
									inputV = Integer.parseInt(input);
								
								} catch (NumberFormatException e) {
									System.out.println("That is not a number.");
								}
							}
							
							if(inputV > statpts) {
								System.out.println("Invalid amount. Exeeded the total amount of points available.\n");
							}else if(inputV < 0) {
								System.out.println("Invalid amount. Type cannot be a negative value.\n");
							}else if(inputV == 0){
								System.out.println("Invalid amount. You cannot add nothing with nothing.\n" );
							}else{
								this.Luck = this.Luck + inputV;
								statpts = statpts - inputV;
								System.out.println("Your Luck has increased by " + inputV + ".\n");
								getStats();
								inputV = 0;
								break;
							}	
						}
						break;
						
					}
				
//				getStats();
				
			} //end of loop
			System.out.println("Type 'exit' to exit the stat menu or 'stats' for stat menu");
			input = this.input.next();
			
			if(input.toLowerCase().equals("exit")) {
				run = false;
				return;
			}else if(input.toLowerCase().equals("stats")) {
				//do nothing just repeat iteration
			}else {
				System.out.println(input + " does not exists.");
			}
			
		}
		
	}
	
	public Stats() {
		//stats are preset at 0
		this.Str = 0;
		this.Int = 0;
		this.Dex = 0;
		this.Will = 0;
		this.Luck = 0;
		
		//base exp for starting character	
		setExpRequirements();
		
	}
	private void setExpRequirements() {
		//Initiliazing experience requirement current max level 50
		
		currentLevel = 1;
		
		for(int i = currentLevel; i <= lvl.length; i++) {
			//Exp requirements based on level instead of iterated gen
			
			// lvl 1 - 10
			if(i < 10) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (1000*1.12345));
			}
			
			// lvl 10 - 25
			if(i >= 10 && i < 25) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (1500*1.2345));
			}
			
			// lvl 25 - 40
			if(i >= 25 && i < 40) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (2500*1.2345));
			}
			
			// lvl 40 - 50
			if(i >= 40 && i < 52) {
				lvl[i] = reachExp;
				reachExp = (int) (reachExp + (4500*1.2345));
			}
			//System.out.println("Reach " + lvl[i] + " to get to level: " + i); //dont mind this. just testing out exp requirement gen
		}
		System.out.println("Exp requirements are set!");
		
	}
	
	
	
	public void getExpRequirements() {
		for(int i = 1; i < lvl.length; i++) {
			System.out.println("Reach " + lvl[i] + " to get to level: " + i); //dont mind this. just testing out exp requirement gen
		}
	}
	
	public void getStats() {
		
		//this just posts your stats. nothing much here.
		System.out.println("\nLevel: " + currentLevel);
		System.out.println("---------------");
		System.out.println("STR: " + Str);
		System.out.println("INT: " + Int);
		System.out.println("DEX: " + Dex);
		System.out.println("WLL: " + Will);
		System.out.println("LCK: " + Luck);
		System.out.println("---------------");
	}
	
	/*stat getters right here are to be used for sub class purposes only
	
	-------------------------------------------------------
	*/
	public int getStr() {
		return Str;
	}
	
	public int getInt() {
		return Int;
	}
	
	public int getWill() {
		return Will;
	}
	
	public int getLuck() {
		return Luck;
	}
	
	public int getDex() {
		return Dex;
	}
	
	public int getLevel() {
		return currentLevel;
	}
	
	public boolean hasLeveled() {
		return leveled;
	}
	
	public int getLevelLooper() {
		return levelLooper;
	}
	
	
	
	/*
	-------------------------------------------------------
	end of getters for subclass purposes
	*/
	
	// reposts for every new level up
	
	private void getStats(int temp1, int temp2, int temp3, int temp4, int temp5) {
		
		System.out.println("Level: " + (currentLevel) );
		System.out.println("---------------");
		if(temp1 == 0) {
			System.out.println("STR: " + Str);
		}else {	
			System.out.println("STR: " + Str + " + " + temp1);
		}
		
		if(temp2 == 0) {
			System.out.println("INT: " + Int);
		}else {
			System.out.println("INT: " + Int + " + " + temp2);
		}
		
		if(temp3 == 0) {
			System.out.println("DEX: " + Dex);
		}else {
		System.out.println("DEX: " + Dex + " + " + temp3);
		}
		
		if(temp4 == 0) {
			System.out.println("WLL: " + Will);
		}else {
			System.out.println("WLL: " + Will + " + "+ temp4);
		}
		
		if(temp5 == 0) {
			System.out.println("LCK: " + Luck);
		}else {
			System.out.println("LCK: " + Luck + " + "+ temp5);
		}
		System.out.println("");
		if(getPts() != 0) {
			System.out.println("You have points available to upgrade " + getPts() + " in total.");
		}
		
	}
	
	
	//THE actual level up and RnG stat distribution
	
	private void lvlUp() {
		
		//Buzz kill or not. Hail Mary on RnG
		
		//one up!
		currentLevel = currentLevel + 1;
		
		temp1 = rand.nextInt(3);
		temp2 = rand.nextInt(3);
		temp3 = rand.nextInt(3);
		temp4 = rand.nextInt(3);
		temp5 = rand.nextInt(3);

		
		if(levelCounter == 10){
			setPts(10);
			levelCounter = 0;
		}
		
		levelCounter++;
		
		getStats(temp1, temp2, temp3, temp4, temp5);
		
		this.Str = Str + temp1;
		this.Int = Int + temp2;
		this.Dex = Dex + temp3;
		this.Will = Will + temp4;
		this.Luck = Luck + temp5;
		
		leveled = true;
		
	}
	
	/*
	 * This is for the roll over exp.
	 * When a player has a large amount of exp. The accumulator from the addExp method will tell this
	 * method how many times to iterate to give out the stats to the player.
	 * racks up a total of how many points earned instead of reading by per level.
	 */
	
	private void lvlUp(int increments) {
		
		//Buzz kill or not. Hail Mary on RnG
		
		for(int i = 0; i < increments; i++) {
			
			temp1 = temp1 + rand.nextInt(3);
			temp2 = temp2 + rand.nextInt(3);
			temp3 = temp3 + rand.nextInt(3);
			temp4 = temp4 + rand.nextInt(3);
			temp5 = temp5 + rand.nextInt(3);
			
			levelCounter++;
			//statpoint giver. +10 per 10 levels 50 additional stat pts in total
			
			if(levelCounter == 10){
				setPts(10);
				levelCounter = 0;
			}
		}
		
		getStats(temp1, temp2, temp3, temp4, temp5);
		
		this.Str = Str + temp1;
		this.Int = Int + temp2;
		this.Dex = Dex + temp3;
		this.Will = Will + temp4;
		this.Luck = Luck + temp5;
		
		leveled = true;
	}
	
	//The stuff that really works here.
	
	
	/*
	 * This method does as stated. adds the amount of exp accumulated to the players level.
	 * This method also has the ability to increase the players potential by moving their level by 1.
	 * Accumulates the Roll-over exp. When a great amount of Exp has given it will be rolled over to next levels.
	 * For an example: a player has gained 10k exp. in order to reach from level 1 to level 2. the player needs 1k.
	 * 					That will end up as 10k - 1k(Exp requirement) which is equal to 9k exp which can still
	 * 					roll over to the next level of 2,3 and so forth. until the exp cannot reach the requirement
	 * 					anymore.
	 */
	public void addExp(int add) {
		float calc = 0;
		Exp = Exp + add;
		int tExp = add;
		levelLooper = 0;
		System.out.println(format.format(add) + " Exp gained!");
		System.out.println("=======================");
		
		
		//stops the player from going passed the level cap
		if(currentLevel == lvl.length - 2) {
			System.out.println("You have reached the max level: " + currentLevel + "!");
			return;
		}

		
		//lvl array holds current exp path to next level
		if(Exp > lvl[currentLevel]) {
			System.out.println("Level up!");
			
			lvlUp(); //current level + 1
			
			System.out.println(format.format((Exp - lvl[currentLevel - 1])) + " Exp carried over!");
			System.out.println("=======================");
			System.out.println("");

			//Sets Exp back to starting position instead of same value.
			Exp = Exp - lvl[currentLevel-1]; //record of previous reachExp
			calc = ((float)Exp/lvl[currentLevel + 1])*100;//calculates the Exp/RequireExp in a percentaged based format
			
			//if it goes over just keep at 100%
			if(calc > 100) {
				calc = 100;
			}
			
			System.out.println("Progress: " + format.format(Exp) + " / " + format.format(lvl[currentLevel]) + " = " + (int)calc + "%" + " Complete! ");
			System.out.println("");
			
			//Exp carry over if amount is greater than exp required
			if(Exp > lvl[currentLevel]) {
				
				System.out.println(format.format((Exp - lvl[currentLevel])) + " Exp gained!");
				System.out.println("=======================");
				System.out.println("");
			}
			
			while(Exp > lvl[currentLevel]) {
				//While the gained Exp is larger than the required Exp to level
				
				//level capper
				if(currentLevel == lvl.length - 2) {
					System.out.println("You have reached the max level: " + currentLevel + "!");
					break;
				}
				
				currentLevel++;			//incrementer and Level accumulator
				levelLooper++;					//Recording how many levels the player has passed
				Exp = Exp - lvl[currentLevel - 1]; //record of current reachExp.
				
				//System.out.println(Exp  + " - " + lvl[currentLevel] + " " + loop); //keep this for logging
				
				calc = ((float)Exp/lvl[currentLevel + 1])*100;
				
				if(calc > 100) {
					calc = 100;
				}
				
				int post = (Exp - lvl[currentLevel + 1]);
				
				if(post > lvl[currentLevel + 1]) {
					System.out.println("Progress: " + format.format(Exp) + " / " + format.format(lvl[currentLevel + 1]) + " = " + (int)calc + "%" + " Complete! ");
					System.out.println("");
				}
				
				//Exp carry over system
				if(Exp > lvl[currentLevel]) {
					
					if(post > lvl[currentLevel + 1]) {
						System.out.println(format.format((Exp - lvl[currentLevel + 1])) + " Exp gained!");
						System.out.println("=======================");
						System.out.println("");
					}

				}

			}
			
			if(levelLooper > 0) {
				
				/*
				 * This statement accumulates the amount of levels passed from the previous while loop.
				 * loop is the counter of how many levels have been accumulated
				 */
				
				System.out.println("Level up!");
				
				lvlUp(levelLooper);
				
				System.out.println(format.format((Exp)) + " Exp carried over!");
				System.out.println("=======================");
				System.out.println("");
				
				System.out.println("Progress: " + format.format(Exp) + " / " + format.format(lvl[currentLevel + 1]) + " = " + (int)calc + "%" + " Complete! \n");
				System.out.println("You have gained: " + levelLooper + " levels from a total of " + format.format(tExp) + " EXP.\n");
				
			}
			
		}
		else{
			leveled = false;
			//Else just gain exp like every other basic system
			calc = ((float)Exp/lvl[currentLevel])*100;
			
			if(calc > 100) {
				calc = 100;
			}
			System.out.println("Progress: " + format.format(Exp) + " / " + format.format(lvl[currentLevel]) + " = " + (int)calc + "%" + " Complete! \n");
		}
		
	}
}